<?php

/**
 * @file
 * Allows provisioning Aegir platforms from a Git repository.
 */

/**
 * Implements hook_hosting_tasks().
 */
function hosting_platform_git_hosting_tasks() {
  $tasks = array();
  
  $tasks['platform']['git_pull'] = array(
    'title' => t('Git pull'),
    'description' => t('Pull from Git and verify'),
    'access callback' => 'hosting_platform_git_pull_access',
  );
  
  return $tasks;
}

/**
 * Implements hook_perm().
 */
function hosting_platform_git_perm() {
  return array(
    'create git_pull task',
  );
}

/**
 * Implements hook_node_operations().
 */
function hosting_platform_git_node_operations() {
  $operations = array();
  
  $operations['hosting-platform-git-pull'] = array(
    'label' => t('Git pull'),
    'callback' => 'hosting_task_operation',
    'callback arguments' => array('git_pull'),
  );
  
  return $operations;
}

/**
 * Access callback for platform_redeploy operation.
 */
function hosting_platform_git_pull_access($node, $task) {
  if ($task == 'git_pull' && isset($node->git['repo_url'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function hosting_platform_git_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'platform_node_form') {
    // If it's a new platform, show git form fields
    if (is_null($form['nid']['#value'])) {
      $form['git'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => t('Deploy from Git'),
        '#collapsible' => TRUE,
        '#description' => t('You may deploy this platform from a Git repository. This functionality cannot be combined with a Makefile.'),
        '#weight' => -1,
      );

      $form['git']['repo_url'] = array(
        '#type' => 'textfield',
        '#title' => 'Repository URL',
        '#description' => t('The full URL that you would pass to <em>git clone</em>. Example:  git@github.com:username/project.git or https://github.com/username/project.git. Note that this repository must be accessible by the Aegir user.'),
      );

      $form['git']['repo_branch'] = array(
        '#type' => 'textfield',
        '#title' => 'Branch or tag name',
        '#description' => t('If a branch or tag name is not supplied, the platform will be deployed from <em>master</em>. This must match the Git branch or tag name exactly.')
      );

      $form['#validate'][] = 'hosting_platform_git_node_form_validate';
    }
    // Otherwise, just show what we already have.
    else {
      if (isset($form['#node']->git['repo_url']) && $form['#node']->git['repo_url'] != 'NOOP') {
        $form['info'] = array(
          '#prefix' => '<div class="clear-block" id="hosting-site-edit-info">',
          '#suffix' => '<br /></div>',
          '#weight' => -10,
        );

        $form['info']['git_repo_url'] = array(
          '#type' => 'item',
          '#title' => t('Repo URL'),
          '#value' => check_plain($form['#node']->git['repo_url']),
        );

        $form['info']['git_repo_branch'] = array(
          '#type' => 'item',
          '#title' => t('Repo branch/tag'),
          '#value' => check_plain($form['#node']->git['repo_branch']),
        );
      }
    }
  }
}

/**
 * Validation callback for platform node form.
 */
function hosting_platform_git_node_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['git']['repo_url']) && !empty($form_state['values']['makefile'])) {
    form_set_error('makefile', t('Git deployment and Makefile deployment cannot be combined'));
  }
}


/**
 * Implements hook_nodeapi().
 */
function hosting_platform_git_nodeapi(&$node, $op) {
  if ($node->type == 'platform') {
    switch ($op) {
      case 'insert':
        $info = new stdClass();
        $info->nid = $node->nid;
        $info->git_repo_url = !empty($node->git['repo_url']) ? $node->git['repo_url'] : 'NOOP';
        $info->git_repo_branch = !empty($node->git['repo_branch']) ? $node->git['repo_branch'] : 'master';
        if ($node->is_new) {
          drupal_write_record('hosting_platform_git', $info);
        }
        else {
          drupal_write_record('hosting_platform_git', $info, 'nid');
        }
        break;
      case 'load':
        if ($result = db_fetch_object(db_query('SELECT * FROM {hosting_platform_git} WHERE nid = %d', $node->nid))) {
          $node->git = array();
          $node->git['repo_url'] = $result->git_repo_url;
          $node->git['repo_branch'] = $result->git_repo_branch;
        }
        break;
      case 'view':
        if (isset($node->git['repo_url']) && $node->git['repo_url'] != 'NOOP') {
          $node->content['info']['git_repo_url'] = array(
            '#type' => 'item',
            '#title' => t('Repository URL'),
            '#weight' => 100,
            '#value' => check_plain($node->git['repo_url']),
          );
          $node->content['info']['git_repo_branch'] = array(
            '#type' => 'item',
            '#title' => t('Repository branch/tag'),
            '#weight' => 100,
            '#value' => check_plain($node->git['repo_branch']),
          );
        }
        break;
    }
  }
}
